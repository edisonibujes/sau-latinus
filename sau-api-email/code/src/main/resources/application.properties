server.port = 8092
server.contextPath=/sau/api/v1/utils
#spring.mail.host = smtp.gmail.com
#mail.host = smtpsrv.dinardap.gob.ec
#mail.username = info.sau@dinardap.gob.ec
#mail.password = M@ilS@u2016*
#mail.port= 25
#mail.properties.starttls.enable = false
spring.mail.host = smtpsrv.dinardap.gob.ec
spring.mail.username = info.sau@dinardap.gob.ec
spring.mail.password = M@ilS@u2016*
spring.mail.port = 25
spring.mail.properties.mail.smtp.starttls.enable = false
#spring.mail.test-connection=true
logging.file = notificacionService2.log
spring.mail.properties.mail.debug = true
spring.mail.properties.mail.smtp.auth = true


#spring.mail.host = smtp.gmail.com
#spring.mail.username = clientelatinus@gmail.com
#spring.mail.password = Latinus01
#spring.mail.port= 587
#spring.mail.properties.mail.smtp.starttls.enable = true

pdf.source=pdfs


# ===============================
# = DATA SOURCE
# ===============================

# Configuración para la BD


# Number of ms to wait before throwing an exception if no connection is available.
spring.datasource.tomcat.max-wait=10000

# Maximum number of active connections that can be allocated from this pool at the same time.
spring.datasource.tomcat.max-active=50

# Validate the connection before borrowing it from the pool.
spring.datasource.tomcat.test-on-borrow=true

# URL de conexión "sau_administrative"
spring.datasource.url = jdbc:mysql://localhost:3306/sau_administrative?useSSL=false
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.database = MYSQL
# Username and password
spring.datasource.username = mijao
spring.datasource.password = mijao

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.dbcp2.test-while-idle = true
#spring.datasource.dbcp2.validation-query= SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = create-drop

# Naming strategy
spring.jpa.hibernate.naming.strategy= org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect